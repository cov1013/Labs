#pragma once
#pragma comment(lib, "Pdh.lib")

#include <Pdh.h>
#include <strsafe.h>

namespace covEngine
{
	#define df_PDH_ETHERNET_MAX	8

	class PerformaceDataHelper
	{
	public:
		/*---------------------------------------------------------------------*/
		// 클래스 기본 구성
		/*---------------------------------------------------------------------*/
		enum en_CONFIG
		{
		};

		//------------------------------------------------
		// 이더넷 하나에 대한 Send, Recv PDH 쿼리 정보.
		//------------------------------------------------
		struct st_ETHERNET
		{
			bool			bUseFlag;
			WCHAR			szName[128];

			PDH_HCOUNTER	PDHCounterNetworkRecvBytes;
			PDH_HCOUNTER	PDHCounterNetworkSendBytes;
		};

	public:
		//////////////////////////////////////////////////////////////////////////
		// 생성자
		//////////////////////////////////////////////////////////////////////////
		PerformaceDataHelper(const WCHAR* szProcessName);

		//////////////////////////////////////////////////////////////////////////
		// 소멸자
		//////////////////////////////////////////////////////////////////////////
		~PerformaceDataHelper();

		//////////////////////////////////////////////////////////////////////////
		// 수집
		//////////////////////////////////////////////////////////////////////////
		void Collect(void);

		//////////////////////////////////////////////////////////////////////////
		// 
		//////////////////////////////////////////////////////////////////////////
		const LONGLONG	GetProcessCommitMemory(void);

		//////////////////////////////////////////////////////////////////////////
		// 
		//////////////////////////////////////////////////////////////////////////
		const LONGLONG	GetProcessNonPagedMemory(void);

		//////////////////////////////////////////////////////////////////////////
		// 
		//////////////////////////////////////////////////////////////////////////
		const LONGLONG	GetAvailableMemory(void);

		//////////////////////////////////////////////////////////////////////////
		// 
		//////////////////////////////////////////////////////////////////////////
		const LONGLONG	GetNonPagedMemory(void);

		//////////////////////////////////////////////////////////////////////////
		// 
		//////////////////////////////////////////////////////////////////////////
		const LONGLONG	GetRecvBytes(void);

		//////////////////////////////////////////////////////////////////////////
		// 
		//////////////////////////////////////////////////////////////////////////
		const LONGLONG	GetSendBytes(void);

		//////////////////////////////////////////////////////////////////////////
		// 
		//////////////////////////////////////////////////////////////////////////
		const LONGLONG	GetTCPv4Retransmitted(void);

		//////////////////////////////////////////////////////////////////////////
		// 
		//////////////////////////////////////////////////////////////////////////
		const double	GetPageFaults(void);

	private:
		//////////////////////////////////////////////////////////////////////////
		// 
		//////////////////////////////////////////////////////////////////////////
		bool AddNetworkInterfaces(void);

	private:
		PDH_HQUERY		m_szQuery;
		PDH_HCOUNTER	m_ProcessCommitMemory;
		PDH_HCOUNTER	m_ProcessNonPagedMemory;
		PDH_HCOUNTER	m_AvailableMemory;
		PDH_HCOUNTER	m_NonPagedMemory;
		PDH_HCOUNTER    m_PageFaults;
		PDH_HCOUNTER    m_CacheFaults;
		PDH_HCOUNTER	m_TCPv4Retransmitted;
		st_ETHERNET		m_Ethernetes[df_PDH_ETHERNET_MAX];
	};
}
