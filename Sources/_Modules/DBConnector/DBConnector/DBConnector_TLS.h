#pragma once

#include <windows.h>
#include <strsafe.h>
#include <stdlib.h>
#include <stdio.h>
#include <list>
#include <stdarg.h>
#include "DBConnector.h"

using namespace std;

namespace cov1013
{
	class DBConnector_TLS
	{
	public:
		/********************************************************************/
		// 기본 구성
		//
		// eCONNECTOR_MAX : 생성 가능 Connector 최대 개수
		// eQUERY_MAX_LEN : 쿼리 최대 길이
		/********************************************************************/
		enum en_CONFIG
		{
			eCONNECTOR_MAX = 100,
			eQUERY_MAX_LEN = 2048,
		};

	public:
		//////////////////////////////////////////////////////////////////////
		// 생성자
		//////////////////////////////////////////////////////////////////////
		DBConnector_TLS(const WCHAR* szDBIP, const WCHAR* szUser, const WCHAR* szPassword, const WCHAR* szDBName, const int iDBPort);

		//////////////////////////////////////////////////////////////////////
		// 소멸자
		//////////////////////////////////////////////////////////////////////
		virtual ~DBConnector_TLS();

		//////////////////////////////////////////////////////////////////////
		// MySQL DB 끊기
		//////////////////////////////////////////////////////////////////////
		bool	Disconnect(void);

		//////////////////////////////////////////////////////////////////////
		// MySQL 쿼리 날리기
		//////////////////////////////////////////////////////////////////////
		bool	Query(const WCHAR* szStringFormat, ...);

		//////////////////////////////////////////////////////////////////////
		// MySQL 쿼리 날리기
		//////////////////////////////////////////////////////////////////////
		bool	Query_Save(const WCHAR* szStringFormat, ...);

		//////////////////////////////////////////////////////////////////////
		// 쿼리를 날린 뒤에 결과 뽑아오기.
		//
		// 결과가 없다면 NULL 리턴.
		//////////////////////////////////////////////////////////////////////
		MYSQL_ROW	FetchRow(void);

		//////////////////////////////////////////////////////////////////////
		// 저장된 쿼리 결과셋을 정리
		//////////////////////////////////////////////////////////////////////
		void		FreeResult(void);

	private:
		//-------------------------------------------------------------
		// TLS에서 사용할 인덱스
		//-------------------------------------------------------------
		DWORD					m_dwTlsIndex;

		//-------------------------------------------------------------
		// 할당해준 DBConnector 포인터 리스트
		// 소멸자에서 해제할 때 사용된다.
		//-------------------------------------------------------------
		list<DBConnector*>		m_pDBConnectors;

		//-------------------------------------------------------------
		// DB 접속 정보
		//-------------------------------------------------------------
		WCHAR					m_szDBIP[16];
		WCHAR					m_szDBUser[64];
		WCHAR					m_szDBPassword[64];
		WCHAR					m_szDBName[64];
		int						m_iDBPort;

		SRWLOCK					m_srw;
	};
}