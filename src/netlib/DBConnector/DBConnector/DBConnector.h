#pragma once

#include <windows.h>
#include <strsafe.h>
#include <stdlib.h>
#include <stdio.h>

#include "mysql/include/mysql.h"
#include "mysql/include/errmsg.h"

//#define __TLS_MODE__

using namespace std;

/////////////////////////////////////////////////////////
// MySQL DB 연결 클래스
//
// 단순하게 MySQL Connector 를 통한 DB 연결만 관리한다.
//
// 스레드에 안전하지 않으므로 주의 해야 함.
// 여러 스레드에서 동시에 이를 사용한다면 개판이 됨.
//
/////////////////////////////////////////////////////////

namespace cov1013
{
	class DBConnector
	{
		friend class DBConnector_TLS;

	public:
		/********************************************************************/
		// 기본 구성
		//
		// eQUERY_MAX_LEN  : 쿼리 최대 길이 (NULL포함)
		// eQUERY_TIME_OUT : 
		/********************************************************************/
		enum en_CONFIG
		{
			eQUERY_MAX_LEN = 2048,
			eQUERY_TIME_OUT = 20000
		};

		//////////////////////////////////////////////////////////////////////
		// 생성자
		//////////////////////////////////////////////////////////////////////
		DBConnector(const WCHAR* szDBIP, const WCHAR* szUser, const WCHAR* szPassword, const WCHAR* szDBName, const int iDBPort);

		//////////////////////////////////////////////////////////////////////
		// 소멸자
		//////////////////////////////////////////////////////////////////////
		virtual		~DBConnector();

		//////////////////////////////////////////////////////////////////////
		// MySQL DB 연결
		//////////////////////////////////////////////////////////////////////
		bool		Connect(void);

		//////////////////////////////////////////////////////////////////////
		// MySQL DB 끊기
		//////////////////////////////////////////////////////////////////////
		bool		Disconnect(void);

		//////////////////////////////////////////////////////////////////////
		// 쿼리 날리기
		//////////////////////////////////////////////////////////////////////
#ifdef __TLS_MODE__
		bool		Query(void);
#else
		bool		Query(const WCHAR* szStringFormat, ...);
#endif

		//////////////////////////////////////////////////////////////////////
		// 쿼리 날리고 결과셋 임시 보관
		//////////////////////////////////////////////////////////////////////
#ifdef __TLS_MODE__
		bool		Query_Save(void);		// DBWriter 스레드의 Save 쿼리 전용
#else
		bool		Query_Save(const WCHAR* szStringFormat, ...);
#endif

		//////////////////////////////////////////////////////////////////////
		// 쿼리를 날린 뒤에 결과 뽑아오기.
		//
		// 결과가 없다면 NULL 리턴.
		//////////////////////////////////////////////////////////////////////
		MYSQL_ROW	FetchRow(void);

		//////////////////////////////////////////////////////////////////////
		// 저장된 쿼리 결과셋을 정리
		//////////////////////////////////////////////////////////////////////
		void		FreeResult(void);

		//////////////////////////////////////////////////////////////////////
		// Error 얻기.
		//////////////////////////////////////////////////////////////////////
		int			GetLastError(void)		{ return m_iLastError; };
		WCHAR*		GetLastErrorMsg(void)	{ return m_szLastErrorMsg; }

		//////////////////////////////////////////////////////////////////////
		// 쿼리를 UTF16 인코딩에서 UTF8 인코딩으로 변환
		//////////////////////////////////////////////////////////////////////
		void		UTF16ToUTF8(const WCHAR* szSrc, char* szDest);

		//////////////////////////////////////////////////////////////////////
		// 쿼리를 UTF8 인코딩에서 UTF16 인코딩으로 변환
		//////////////////////////////////////////////////////////////////////
		void		UTF8ToUTF16(const char* szSrc, WCHAR* szDest);


		void		Lock(void)		{ AcquireSRWLockExclusive(&m_srw); };
		void		Unlock(void)	{ ReleaseSRWLockExclusive(&m_srw); };

	private:
		//////////////////////////////////////////////////////////////////////
		// MySQL 의 LastError를 맴버 변수로 저장한다.
		//////////////////////////////////////////////////////////////////////
		void		SaveLastError(void);

	private:
		//-------------------------------------------------------------
		// MySQL 연결객체 본체
		//-------------------------------------------------------------
		MYSQL		m_MySQL;

		//-------------------------------------------------------------
		// MySQL 연결객체 포인터. 위 변수의 포인터임. 
		// 이 포인터의 null 여부로 연결상태 확인.
		//-------------------------------------------------------------
		MYSQL*		m_pMySQL;

		//-------------------------------------------------------------
		// 쿼리를 날린 뒤 Result 저장소.
		//-------------------------------------------------------------
		MYSQL_RES*	m_pSqlResult;

		//-------------------------------------------------------------
		// DB 접속 정보
		//-------------------------------------------------------------
		WCHAR		m_szDBIP[16];
		WCHAR		m_szDBUser[64];
		WCHAR		m_szDBPassword[64];
		WCHAR		m_szDBName[64];
		int			m_iDBPort;

		//-------------------------------------------------------------
		// 디버깅을 위해 클래스 멤버 변수에 저장한다.
		//-------------------------------------------------------------
		WCHAR		m_szQuery[eQUERY_MAX_LEN];
		char		m_szQueryUTF8[eQUERY_MAX_LEN];

		//-------------------------------------------------------------
		// MySQL 에러 정보를 저장
		//-------------------------------------------------------------
		int			m_iLastError;
		WCHAR		m_szLastErrorMsg[128];

		//-------------------------------------------------------------
		// 락을 위한 동기화객체
		//-------------------------------------------------------------
		SRWLOCK		m_srw;
	};
}